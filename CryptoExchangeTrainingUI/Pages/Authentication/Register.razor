
@page "/register"
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject ILogger<Register> Logger

<div class="auth-container">
    <div class="auth-box">
        <h3 class="text-center mb-4">Register</h3>

        @if (errors.Any())
        {
            <div class="alert alert-danger">
                @foreach (var error in errors)
                {
                    <div>@error</div>
                }
            </div>
        }

        <EditForm Model="@registerRequest" OnValidSubmit="HandleRegister">
            <DataAnnotationsValidator />

            <div class="form-group">
                <label for="email">Email</label>
                <InputText id="email" @bind-Value="registerRequest.Email" class="form-control" />
                <ValidationMessage For="@(() => registerRequest.Email)" />
            </div>

            <div class="form-group">
                <label for="password">Password</label>
                <InputText type="password" id="password" @bind-Value="registerRequest.Password" class="form-control" />
                <ValidationMessage For="@(() => registerRequest.Password)" />
            </div>

            <div class="form-group">
                <label for="confirmPassword">Confirm Password</label>
                <InputText type="password" id="confirmPassword" @bind-Value="registerRequest.ConfirmPassword" class="form-control" />
                <ValidationMessage For="@(() => registerRequest.ConfirmPassword)" />
            </div>

            <button type="submit" class="btn btn-primary w-100" disabled="@isLoading">
                @if (isLoading)
                {
                    <span class="spinner-border spinner-border-sm mr-2"></span>
                }
                Register
            </button>
        </EditForm>

        <div class="mt-3 text-center">
            <a href="login">Already have an account? Login here</a>
        </div>
    </div>
</div>

@code {
    private RegisterRequest registerRequest = new();
    private List<string> errors = new();
    private bool isLoading;

    private async Task HandleRegister()
    {
        try
        {
            isLoading = true;
            errors.Clear();

            var response = await AuthService.Register(registerRequest);

            if (response.Success)
            {
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                errors.AddRange(response.Errors);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Registration error");
            errors.Add("An unexpected error occurred. Please try again.");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}