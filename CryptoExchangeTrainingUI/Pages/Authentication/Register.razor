@page "/register"
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<div class="auth-container">
    <div class="auth-box">
        <h3 class="text-center mb-4">Register</h3>

        @if (!string.IsNullOrEmpty(message))
        {
            <div class="alert alert-@messageType">
                @((MarkupString)message)
            </div>
        }

        <EditForm Model="@registerRequest" OnValidSubmit="HandleRegister">
            <DataAnnotationsValidator />

            <div class="form-group">
                <label for="email">Email</label>
                <InputText id="email" @bind-Value="registerRequest.Email" class="form-control" />
                <ValidationMessage For="@(() => registerRequest.Email)" />
            </div>

            <div class="form-group">
                <label for="password">Password</label>
                <InputText type="password" id="password" @bind-Value="registerRequest.Password" class="form-control" />
                <ValidationMessage For="@(() => registerRequest.Password)" />
            </div>

            <div class="form-group">
                <label for="confirmPassword">Confirm Password</label>
                <InputText type="password" id="confirmPassword" @bind-Value="registerRequest.ConfirmPassword" class="form-control" />
                <ValidationMessage For="@(() => registerRequest.ConfirmPassword)" />
            </div>

            <button type="submit" class="btn btn-primary w-100" disabled="@isLoading">
                @if (isLoading)
                {
                    <span class="spinner-border spinner-border-sm mr-2"></span>
                }
                Register
            </button>
        </EditForm>

        <div class="mt-3 text-center">
            <a href="login">Already have an account? Login here</a>
        </div>
    </div>
</div>

@code {
    private RegisterRequest registerRequest = new();
    private bool isLoading;
    private string message = string.Empty;
    private string messageType = "info"; // Тип сообщения: info, success, danger и т.д.

    private async Task HandleRegister()
    {
        try
        {
            isLoading = true;
            message = string.Empty;

            // Assuming Register now returns an ExpandoObject or similar dynamic object
            var response = await AuthService.Register(registerRequest);

            if (response.Success)
            {
                messageType = "success";
                message = response.Message;
                await Task.Delay(2000); // Небольшая задержка для отображения сообщения
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                messageType = "danger";
                message = response.Message ?? "Registration failed. Please try again.";

                if (response.Errors != null && response.Errors.Any())
                {
                    message += "<ul>";
                    foreach (var error in response.Errors)
                    {
                        message += $"<li>{error}</li>";
                    }
                    message += "</ul>";
                }
            }
        }
        catch (Exception ex)
        {
            messageType = "danger";
            message = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}